# $Id$
# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Sebastian Nowicki <sebnow@gmail.com>
# Contributor: Devin Cofer <ranguvar{AT]archlinux[DOT}us>
# Contributor: Tobias Kieslich <tobias@justdreams.de>
# Contributor: Geoffroy Carrier <geoffroy.carrier@aur.archlinux.org>
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Gerardo Exequiel Pozzi <vmlinuz386@yahoo.com.ar>

_gitroot="http://llvm.org/git/llvm"
_gitname="repo-llvm"

pkgname=(llvm llvm-libs llvm-ocaml lldb clang clang-analyzer clang-tools-extra)
pkgver=3.9.0.r133872.g75473ec
pkgrel=1
arch=('i686' 'x86_64')
url="http://llvm.org/"
license=('custom:University of Illinois/NCSA Open Source License')
makedepends=('git' 'cmake' 'libffi' 'python2' "ocaml" 'python-sphinx' 'python2-sphinx'
             'ocaml-ctypes' 'ocaml-findlib' 'libedit' 'swig' 'chrpath')
options=('staticlibs')
source=($_gitname::git+$_gitroot
        repo-clang::git+http://llvm.org/git/clang.git
        repo-clang-tools-extra::git+http://llvm.org/git/clang-tools-extra.git
        repo-compiler-rt::git+http://llvm.org/git/compiler-rt.git
        repo-lldb::git+http://llvm.org/git/lldb.git
        llvm-Config-llvm-config.h)
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48'
            )

# Determine the installed OCaml package version
# Arguments: NONE
_ocamlver() {
    pacman -Q ocaml | awk '{ print $2 }' | cut -d - -f 1 | cut -d . -f 1,2,3
}

pkgver() {
  cd "$_gitname"
  printf "%s.%s.%s.r%s.g%s" \
    "$(git show HEAD:CMakeLists.txt | grep 'set(LLVM_VERSION_MAJOR' | sed -e 's/[^0-9]*//g')" \
    "$(git show HEAD:CMakeLists.txt | grep 'set(LLVM_VERSION_MINOR' | sed -e 's/[^0-9]*//g')" \
    "$(git show HEAD:CMakeLists.txt | grep 'set(LLVM_VERSION_PATCH' | sed -e 's/[^0-9]*//g')" \
    "$(git rev-list HEAD --count)" \
    "$(git rev-parse --short HEAD)"

}

prepare() {
  cd "${srcdir}/${_gitname}"

  # At the present, clang must reside inside the LLVM source code tree to build
  # See http://llvm.org/bugs/show_bug.cgi?id=4840
  rm -rf tools/clang && git clone ${srcdir}/repo-clang tools/clang

  rm -rf tools/clang/tools/extra && git clone ${srcdir}/repo-clang-tools-extra tools/clang/tools/extra

  rm -rf projects/compiler-rt && git clone ${srcdir}/repo-compiler-rt projects/compiler-rt

  rm -rf tools/lldb && git clone ${srcdir}/repo-lldb tools/lldb

  mkdir -p build

  touch tools/lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.exe
}

build() {
  cd "$srcdir/$_gitname/build"

  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_DYLIB_EXPORT_ALL=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_BUILD_TESTS=ON \
    -DLLVM_BUILD_DOCS=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DLLVM_ENABLE_DOXYGEN=OFF \
    -DSPHINX_WARNINGS_AS_ERRORS=OFF \
    -DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
    -DLLVM_BINUTILS_INCDIR=/usr/include \
    ..

  make

  # Must run this target independently, or else docs/cmake_install.cmake will fail.
  # Also, we must check that there isn't an incompatible llvm-ocaml package installed,
  # or else the build will fail with "inconsistent assumptions over interface" errors.
  [[ $(ocamlfind query -format %v llvm 2>/dev/null | tr - _) =~ (${pkgver}|^$) ]] || {
      error 'Incompatible LLVM OCaml bindings installed.'
      plain 'Please either uninstall any currently installed llvm-ocaml* package before building,'
      plain 'or, __preferably__, build in a clean chroot, as described on the Arch Linux wiki:'
      plain 'https://wiki.archlinux.org/index.php/DeveloperWiki:Building_in_a_Clean_Chroot'
      exit 1
  }
  make ocaml_doc

  # Disable automatic installation of components that go into subpackages
  sed -i '/\(clang\|lldb\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i '/extra\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
  sed -i '/compiler-rt\/cmake_install.cmake/d' projects/cmake_install.cmake
}

check() {
  cd "$srcdir/$_gitname/build"
  make check
  make check-clang || warning \
    'Ignoring Clang test failures caused by name mangling differences'
}

package_llvm() {
  pkgdesc="Low Level Virtual Machine"
  depends=("llvm-libs=$pkgver-$pkgrel" 'perl')
  provides=('llvm-svn')
  replaces=('llvm-svn')
  conflicts=('llvm-svn')

  cd "$srcdir/$_gitname"

  make -C build DESTDIR="$pkgdir" install

  # Remove documentation sources
  rm -r "$pkgdir"/usr/share/doc/$pkgname/html/{_sources,.buildinfo}

  # The runtime libraries go into llvm-libs
  mv -f "$pkgdir"/usr/lib/lib{LLVM,LLVM-*,LTO}.so* "$srcdir"
  mv -f "$pkgdir"/usr/lib/LLVMgold.so "$srcdir"

  # OCaml bindings go to a separate package
  rm -rf "$srcdir"/ocaml.{lib,doc}
  mv "$pkgdir/usr/lib/ocaml" "$srcdir/ocaml.lib"
  mv "$pkgdir/usr/docs/ocaml/html" "$srcdir/ocaml.doc"
  rm -r "$pkgdir/usr/docs"

  if [[ $CARCH == x86_64 ]]; then
    # Needed for multilib (https://bugs.archlinux.org/task/29951)
    # Header stub is taken from Fedora
    mv "$pkgdir/usr/include/llvm/Config/llvm-config"{,-64}.h
    cp "$srcdir/llvm-Config-llvm-config.h" \
      "$pkgdir/usr/include/llvm/Config/llvm-config.h"
  fi

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_llvm-libs() {
  pkgdesc="Low Level Virtual Machine (runtime libraries)"
  depends=('gcc-libs' 'zlib' 'libffi' 'libedit' 'ncurses')
  provides=('llvm-libs-svn')
  conflicts=('llvm-libs-svn')
  replaces=('llvm-libs-svn')

  install -d "$pkgdir/usr/lib"
  cp -P \
    "$srcdir"/lib{LLVM,LLVM-*,LTO}.so* \
    "$srcdir"/LLVMgold.so \
    "$pkgdir/usr/lib/"

  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  # https://bugs.archlinux.org/task/28479
  install -d "$pkgdir/usr/lib/bfd-plugins"
  ln -s ../LLVMgold.so "$pkgdir/usr/lib/bfd-plugins/LLVMgold.so"

  install -Dm644 "$srcdir/$_gitname/LICENSE.TXT" \
    "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_llvm-ocaml() {
  pkgdesc="OCaml bindings for LLVM"
  depends=("llvm=$pkgver-$pkgrel" "ocaml=$(_ocamlver)" 'ocaml-ctypes')
  provides=('llvm-ocaml-svn')
  replaces=('llvm-ocaml-svn')
  conflicts=('llvm-ocaml-svn')

  cd "$srcdir/$_gitname"

  install -d "$pkgdir"/{usr/lib,usr/share/doc}
  cp -a "$srcdir/ocaml.lib" "$pkgdir/usr/lib/ocaml"
  cp -a "$srcdir/ocaml.doc" "$pkgdir/usr/share/doc/$pkgname"

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}


package_lldb() {
  pkgdesc="Next generation, high-performance debugger"
  url="http://lldb.llvm.org/"
  depends=('libedit' 'libxml2' 'python2')

  cd "$srcdir/$_gitname"

  make -C build/tools/lldb DESTDIR="$pkgdir" install

  # Compile Python scripts
  python2 -m compileall "$pkgdir/usr/lib/python2.7/site-packages/lldb"
  python2 -O -m compileall "$pkgdir/usr/lib/python2.7/site-packages/lldb"

  install -Dm644 tools/lldb/LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_clang() {
  pkgdesc="C language family frontend for LLVM"
  url="http://clang.llvm.org/"
  depends=("llvm-libs=$pkgver-$pkgrel" 'gcc')
  optdepends=('python2: for git-clang-format')
  provides=('clang-svn')
  replaces=('clang-svn')
  conflicts=('clang-svn')

  cd "$srcdir/$_gitname"

  make -C build/tools/clang DESTDIR="$pkgdir" install
  make -C build/projects/compiler-rt DESTDIR="$pkgdir" install

  # Remove documentation sources
  rm -r "$pkgdir"/usr/share/doc/$pkgname/html/{_sources,.buildinfo}

  # Install Python bindings
  install -d "$pkgdir/usr/lib/python2.7/site-packages"
  cp -a tools/clang/bindings/python/clang "$pkgdir/usr/lib/python2.7/site-packages/"
  python2 -m compileall "$pkgdir/usr/lib/python2.7/site-packages/clang"
  python2 -O -m compileall "$pkgdir/usr/lib/python2.7/site-packages/clang"

  # Use Python 2
  sed -i 's|/usr/bin/env python|&2|' \
    "$pkgdir/usr/bin/git-clang-format" \
    "$pkgdir/usr/share/$pkgname/clang-format-diff.py"

  install -Dm644 tools/clang/LICENSE.TXT \
    "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_clang-analyzer() {
  pkgdesc="A source code analysis framework"
  url="http://clang-analyzer.llvm.org/"
  depends=("clang=$pkgver-$pkgrel" 'python2')
  provides=('clang-analyzer-svn')
  replaces=('clang-analyzer-svn')
  conflicts=('clang-analyzer-svn')

  cd "$srcdir/$_gitname/tools/clang"

  install -d "$pkgdir"/usr/{bin,lib/clang-analyzer}
  for _tool in scan-{build,view}; do
    cp -a tools/$_tool "$pkgdir/usr/lib/clang-analyzer/"
    ln -s /usr/lib/clang-analyzer/$_tool/$_tool "$pkgdir/usr/bin/"
  done

  # scan-build looks for clang within the same directory
  ln -s /usr/bin/clang "$pkgdir/usr/lib/clang-analyzer/scan-build/"

  # Relocate man page
  install -d "$pkgdir/usr/share/man/man1"
  mv "$pkgdir/usr/lib/clang-analyzer/scan-build/man/scan-build.1" \
    "$pkgdir/usr/share/man/man1/"

  # Use Python 2
  sed -i \
    -e 's|env python$|&2|' \
    -e 's|/usr/bin/python$|&2|' \
    "$pkgdir/usr/lib/clang-analyzer/scan-view/bin/scan-view" \
    "$pkgdir/usr/lib/clang-analyzer/scan-build/bin/scan-build" \
    "$pkgdir/usr/lib/clang-analyzer/scan-build/bin/set-xcode-analyzer"

  # Compile Python scripts
  python2 -m compileall "$pkgdir/usr/lib/clang-analyzer"
  python2 -O -m compileall "$pkgdir/usr/lib/clang-analyzer"

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_clang-tools-extra() {
  pkgdesc="Extra tools built using Clang's tooling APIs"
  url="http://clang.llvm.org/"
  depends=("clang=$pkgver-$pkgrel")
  provides=('clang-tools-extra-svn')
  replaces=('clang-tools-extra-svn')
  conflicts=('clang-tools-extra-svn')

  cd "$srcdir/$_gitname"

  make -C build/tools/clang/tools/extra DESTDIR="$pkgdir" install

  # Use Python 2
  sed -i \
    -e 's|env python$|&2|' \
    -e 's|/usr/bin/python$|&2|' \
    "$pkgdir"/usr/share/clang/{clang-tidy-diff,run-clang-tidy}.py

  install -Dm644 tools/clang/tools/extra/LICENSE.TXT \
    "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

# vim:set ts=2 sw=2 et:
