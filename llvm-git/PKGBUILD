# Maintainer: Armin K. <krejzi at email dot com>
# Contributor: Christian Babeux <christian.babeux@0x80.ca>
# Contributor: Thomas Dziedzic < gostrc at gmail >
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Anders Bergh <anders@archlinuxppc.org>
# Contributor: Tomas Wilhelmsson <tomas.wilhelmsson@gmail.com>

_gitroot="http://llvm.org/git/llvm"
_gitname="llvm"

pkgname=(llvm-git llvm-libs-git llvm-ocaml-git lldb-git clang-git clang-analyzer-git clang-compiler-rt-git clang-tools-extra-git)
pkgver=r127154.6264f29
pkgrel=1
pkgdesc='Low Level Virtual Machine'
arch=('i686' 'x86_64')
url="http://llvm.org"
license=('custom:University of Illinois')
makedepends=(
    'cmake'
    'libffi'
    'ocaml-ctypes'
    'ocaml-findlib'
    'python2'
    'python2-sphinx'
    'chrpath'
    'libedit'
    'swig'
    'git'
)
options=('staticlibs' '!strip')
source=(git+$_gitroot
        git+http://llvm.org/git/clang.git
        git+http://llvm.org/git/clang-tools-extra.git
        git+http://llvm.org/git/compiler-rt.git
        git+http://llvm.org/git/lldb.git
        llvm-Config-llvm-config.h
)
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48'
            )

# Python site-packages dir (relative to ${pkgdir})
_py_sitepkg_dir="/usr/lib/python2.7/site-packages"

# Determine the installed OCaml package version
# Arguments: NONE
_ocamlver() {
    pacman -Q ocaml | awk '{ print $2 }' | cut -d - -f 1 | cut -d . -f 1,2,3
}

# Fix the Python interpreter path in .py files to point to python2
# Arguments: py_file_to_patch [py_file_to_patch ...]
_fix_python_exec_path() {
    sed -i \
        -e 's|^#!/usr/bin/python$|&2|' \
        -e 's|^#!/usr/bin/env python$|&2|' \
        ${@}
}

# Compile the Python files in a directory
# Arguments: directory_to_operate_on
_compile_python_files() {
    python2 -m compileall "${1}"
    python2 -O -m compileall "${1}"
}

# Install the Python bindings of a package
# Arguments: source_directory_to_install_from
_install_python_bindings() {
    install -m 0755 -d "${pkgdir}${_py_sitepkg_dir}"
    cp -r "${1}" "${pkgdir}${_py_sitepkg_dir}/"
    _compile_python_files "${pkgdir}${_py_sitepkg_dir}/${1##*/}"
}

# Install the license file for a package
# Arguments: NONE
_install_license() {
    install -D -m 0644 "${1}" "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

pkgver() {
  cd "$srcdir/$_gitname"
  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd "${srcdir}/${_gitname}"

  rm -rf tools/clang
  git clone ${srcdir}/clang tools/clang

  rm -rf tools/clang/tools/extra
  git clone ${srcdir}/clang-tools-extra tools/clang/tools/extra

  rm -rf projects/compiler-rt
  git clone ${srcdir}/compiler-rt projects/compiler-rt

  rm -rf tools/lldb
  git clone ${srcdir}/lldb tools/lldb


    # Fix docs installation directory
    sed -e 's|^\([[:blank:]]*DESTINATION[[:blank:]]\+\)docs/html|\1share/doc|' \
        -e 's|^\([[:blank:]]*DESTINATION[[:blank:]]\+\)docs/ocaml/html|\1share/doc/ocaml|' \
        -i docs/CMakeLists.txt

  rm -rf "${srcdir}/build"
  mkdir -p "${srcdir}/build"
}

build() {
  cd "${srcdir}/build"

  export PKG_CONFIG_PATH='/usr/lib/pkgconfig'

  # LLVM_BUILD_LLVM_DYLIB: Build the dynamic runtime libraries (e.g. libLLVM.so).
  # LLVM_LINK_LLVM_DYLIB:  Link our own tools against the libLLVM dynamic library, too.
  # LLVM_BINUTILS_INCDIR:  Set to binutils' plugin-api.h location in order to build LLVMgold.
  cmake -G 'Unix Makefiles' \
        -DCMAKE_BUILD_TYPE:STRING=Release \
        -DCMAKE_INSTALL_PREFIX:PATH=/usr \
        -DLLVM_APPEND_VC_REV:BOOL=ON \
        -DLLVM_ENABLE_RTTI:BOOL=ON \
        -DLLVM_ENABLE_FFI:BOOL=ON \
        -DFFI_INCLUDE_DIR:PATH="$(pkg-config --variable=includedir libffi)" \
        -DFFI_LIBRARY_DIR:PATH="$(pkg-config --variable=libdir libffi)" \
        -DLLVM_BUILD_DOCS:BOOL=OFF \
        -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
        -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
        -DLLVM_BINUTILS_INCDIR:PATH=/usr/include \
        "../${_gitname}"

  # Must run this target independently, or else docs/cmake_install.cmake will fail.
  # Also, we must check that there isn't an incompatible llvm-ocaml package installed,
  # or else the build will fail with "inconsistent assumptions over interface" errors.
  [[ $(ocamlfind query -format %v llvm 2>/dev/null | tr - _) =~ (${pkgver}|^$) ]] || {
      error 'Incompatible LLVM OCaml bindings installed.'
      plain 'Please either uninstall any currently installed llvm-ocaml* package before building,'
      plain 'or, __preferably__, build in a clean chroot, as described on the Arch Linux wiki:'
      plain 'https://wiki.archlinux.org/index.php/DeveloperWiki:Building_in_a_Clean_Chroot'
      exit 1
  }
  make ocaml_doc

  make
}

package_llvm-git() {
  pkgdesc='The LLVM Compiler Infrastructure'
  depends=('llvm-libs-git' 'perl')
  provides=('llvm' 'llvm-svn')
  replaces=('llvm' 'llvm-svn')
  conflicts=('llvm' 'llvm-svn')

  cd "${srcdir}/build"

  # Exclude the clang directory, since it'll be installed in a separate package
  sed -i \
      "s|^\([[:blank:]]*include(\"${srcdir}/build/tools/clang/cmake_install.cmake\")\)$|#\1|" \
      tools/cmake_install.cmake

  # Exclude the lldb directory, since it'll be installed in a separate package
  sed -i \
      "s|^\([[:blank:]]*include(\"${srcdir}/build/tools/lldb/cmake_install.cmake\")\)$|#\1|" \
      tools/cmake_install.cmake

  make DESTDIR="${pkgdir}" install

  # The runtime libraries get installed in llvm-libs-svn
  rm -f "${pkgdir}"/usr/lib/lib{LLVM,LTO}.so{,.*}
  rm -f "${pkgdir}"/usr/lib/libLLVM-*
  mv -f "${pkgdir}"/usr/lib/{BugpointPasses,LLVMgold}.so "${srcdir}/"

  # Clang libraries and OCaml bindings go to separate packages
  rm -rf "${srcdir}"/{clang,ocaml.{doc,lib}}
  mv "${pkgdir}/usr/lib/clang" "${srcdir}/clang"
  mv "${pkgdir}/usr/lib/ocaml" "${srcdir}/ocaml.lib"
  mv "${pkgdir}/usr/share/doc/ocaml" "${srcdir}/ocaml.doc"

  # Get rid of example Hello transformation
  rm -f "${pkgdir}"/usr/lib/*LLVMHello.*

  if [[ "${CARCH}" == "x86_64" ]]; then
      # Needed for multilib (https://bugs.archlinux.org/task/29951)
      # Header stubs are taken from Fedora
      mv "${pkgdir}/usr/include/llvm/Config/llvm-config"{,-64}.h
      cp "${srcdir}/llvm-Config-llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
  fi

  # Clean up documentation
  rm -rf "${pkgdir}/usr/share/doc/llvm/html/_sources"

  _install_python_bindings "${srcdir}/llvm/bindings/python/llvm"

  _install_license "${srcdir}/${_gitname}/LICENSE.TXT"
}

package_llvm-libs-git() {
  pkgdesc='The LLVM Compiler Infrastructure (runtime libraries)'
  depends=( 'libffi' 'zlib' 'libedit')
  groups=('llvm-toolchain-git')
  provides=('llvm-libs' 'llvm-libs-svn')
  conflicts=('llvm-libs' 'llvm-libs-svn')
  replaces=('llvm-libs' 'llvm-libs-svn')

  cd "${srcdir}/build"

  make DESTDIR="${pkgdir}" install-{LLVM,LTO}

  # Moved from the llvm-svn package here
  mv "${srcdir}"/{BugpointPasses,LLVMgold}.so "${pkgdir}/usr/lib/"

  # Ref: http://llvm.org/docs/GoldPlugin.html
  install -m755 -d "${pkgdir}/usr/lib/bfd-plugins"
  ln -s {/usr/lib,"${pkgdir}/usr/lib/bfd-plugins"}/LLVMgold.so

  # Must have a symlink that corresponds to the output of `llvm-config --version`.
  # Without it, some builds, e.g. Mesa, might fail for "lack of shared libraries".
  ln -rs "${pkgdir}/usr/lib/libLLVM-3.9svn.so" "${pkgdir}/usr/lib/libLLVM-3.9.0git.so"

  _install_license "${srcdir}/${_gitname}/LICENSE.TXT"
}

package_llvm-ocaml-git() {
  pkgdesc='OCaml bindings for LLVM'
  depends=(
      "llvm-git"
      "ocaml=$(_ocamlver)"
      'ocaml-ctypes'
  )
  provides=('llvm-ocaml' 'llvm-ocaml-svn')
  replaces=('llvm-ocaml' 'llvm-ocaml-svn')
  conflicts=('llvm-ocaml' 'llvm-ocaml-svn')

  cd "${srcdir}/build"

  install -m755 -d "${pkgdir}/usr/lib"
  install -m755 -d "${pkgdir}/usr/share/doc"
  cp -a "${srcdir}/ocaml.lib" "${pkgdir}/usr/lib/ocaml"
  cp -a "${srcdir}/ocaml.doc" "${pkgdir}/usr/share/doc/ocaml"

  _install_license "${srcdir}/${_gitname}/LICENSE.TXT"
}


package_lldb-git() {
  pkgdesc="Next generation, high-performance debugger"
  url="http://lldb.llvm.org/"
  depends=('llvm-libs-git' 'libedit' 'python2')

  cd "$srcdir/build/tools/lldb"

  make DESTDIR="${pkgdir}" install

  # Fix permissions of static libs
  chmod -x "${pkgdir}"/usr/lib/*.a

  # Remove insecure rpath
  chrpath -d "${pkgdir}"/usr/bin/*

  # Compile Python scripts
  python2 -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"
  python2 -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"

  _install_license "${srcdir}/${_gitname}/tools/lldb/LICENSE.TXT"
}

package_clang-git() {
  pkgdesc='C language family frontend for LLVM'
  url='http://clang.llvm.org/'
  depends=('llvm-git')
  optdepends=(
      'clang-analyzer-git: source code analysis for Clang, supporting C, C++, and Objective-C'
      'clang-compiler-rt-git: sanitizer runtimes, builtins, profile library and BlocksRuntime'
      'clang-tools-extra-git: standalone tools: syntax checking, formatting, refactoring, etc.'
      'python2: git-clang-format and clang-format-diff.py support'
  )
  groups=('llvm-toolchain-git')
  provides=('clang' 'clang-svn')
  replaces=('clang' 'clang-svn')
  conflicts=('clang' 'clang-svn')

  cd "${srcdir}/build/tools/clang"

  # Exclude the extra directory, since it'll be installed in a separate package
  sed -i \
      "s|^\([[:blank:]]*include(\"${srcdir}/build/tools/clang/tools/extra/cmake_install.cmake\")\)$|#\1|" \
      tools/cmake_install.cmake

  make DESTDIR="${pkgdir}" install

  # The Clang Static Analyzer is installed in a separate package
  # TODO: Probably there's more elegant way to achieve this.

  rm -rf "${srcdir}/clang-analyzer.tmp"

  install -m 0755 -d \
      "${srcdir}/clang-analyzer.tmp/usr/bin" \
      "${srcdir}/clang-analyzer.tmp/usr/share/man/man1" \
      "${srcdir}/clang-analyzer.tmp/usr/share/scan-build" \
      "${srcdir}/clang-analyzer.tmp/usr/share/scan-view"

  mv \
      "${pkgdir}/usr/bin/scan-build" \
      "${pkgdir}/usr/bin/scan-view" \
      "${pkgdir}/usr/libexec/c++-analyzer" \
      "${pkgdir}/usr/libexec/ccc-analyzer" \
      \
      "${srcdir}/clang-analyzer.tmp/usr/bin/"

  mv \
      "${pkgdir}/usr/share/man/man1/scan-build.1" \
      \
      "${srcdir}/clang-analyzer.tmp/usr/share/man/man1/"

  mv \
      "${pkgdir}/usr/share/scan-build/scanview.css" \
      "${pkgdir}/usr/share/scan-build/sorttable.js" \
      \
      "${srcdir}/clang-analyzer.tmp/usr/share/scan-build/"

  mv \
      "${pkgdir}/usr/share/scan-view/FileRadar.scpt" \
      "${pkgdir}/usr/share/scan-view/GetRadarVersion.scpt" \
      "${pkgdir}/usr/share/scan-view/Reporter.py" \
      "${pkgdir}/usr/share/scan-view/ScanView.py" \
      "${pkgdir}/usr/share/scan-view/bugcatcher.ico" \
      "${pkgdir}/usr/share/scan-view/startfile.py" \
      \
      "${srcdir}/clang-analyzer.tmp/usr/share/scan-view/"

  rmdir \
      "${pkgdir}/usr/libexec" \
      "${pkgdir}/usr/share/scan-build" \
      "${pkgdir}/usr/share/scan-view"

  # Clean up documentation
  #rm -r "${pkgdir}/usr/share/doc/clang/html/_sources"

  _fix_python_exec_path \
      "${pkgdir}/usr/bin/git-clang-format" \
      "${pkgdir}/usr/share/clang/clang-format-diff.py"

  _install_python_bindings "${srcdir}/llvm/tools/clang/bindings/python/clang"

  _install_license "${srcdir}/${_gitname}/LICENSE.TXT"
}

package_clang-analyzer-git() {
  pkgdesc='Source code analysis tool for Clang, supporting C, C++, and Objective-C'
  url='http://clang-analyzer.llvm.org/'
  depends=('clang-git' 'python2')
  groups=('llvm-toolchain-git')
  provides=('clang-analyzer' 'clang-analyzer-svn')
  replaces=('clang-analyzer' 'clang-analyzer-svn')
  conflicts=('clang-analyzer' 'clang-analyzer-svn')

  cd "${srcdir}"

  mv "${srcdir}/clang-analyzer.tmp"/* "${pkgdir}"/

  sed -i 's|/libexec/|/bin/|' "${pkgdir}/usr/bin/scan-build"

  _fix_python_exec_path \
      "${pkgdir}/usr/bin/scan-view"

  _compile_python_files "${pkgdir}/usr/lib/clang-analyzer"

  _install_license "${srcdir}/${_gitname}/LICENSE.TXT"
}

package_clang-compiler-rt-git() {
  pkgdesc='The "compiler-rt" set of runtime libraries for Clang and LLVM'
  url='http://compiler-rt.llvm.org/'
  depends=("clang-git")
  groups=('llvm-toolchain-git')
  provides=('clang-compiler-rt' 'clang-compiler-rt-svn')
  replaces=('clang-compiler-rt' 'clang-compiler-rt-svn')
  conflicts=('clang-compiler-rt' 'clang-compiler-rt-svn')

  cd "${srcdir}/build/projects/compiler-rt"

  make DESTDIR="${pkgdir}" install

  _install_license "${srcdir}/${_gitname}/LICENSE.TXT"
}


package_clang-tools-extra-git() {
  pkgdesc='Standalone tools for Clang: syntax checking, formatting, refactoring, etc.'
  url='http://clang.llvm.org/docs/ClangTools.html'
  depends=('clang-git')
  groups=('llvm-toolchain-git')
  provides=('clang-tools-extra' 'clang-tools-extra-svn')
  replaces=('clang-tools-extra' 'clang-tools-extra-svn')
  conflicts=('clang-tools-extra' 'clang-tools-extra-svn')

  cd "${srcdir}/build/tools/clang/tools/extra"

  make DESTDIR="${pkgdir}" install

  _install_license "${srcdir}/${_gitname}/LICENSE.TXT"
}
# vim: ft=sh syn=sh et

