# Maintainer: Thomas Dziedzic < gostrc at gmail >
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Anders Bergh <anders@archlinuxppc.org>
# Contributor: Tomas Wilhelmsson <tomas.wilhelmsson@gmail.com>

_gitroot="http://llvm.org/git/llvm"
_gitname="llvm"
_realver="3.5svn"

pkgname=(llvm-git llvm-libs-git llvm-ocaml-git clang-git clang-tools-extra-git clang-analyzer-git)
pkgver=r103580.e7dd13a
pkgrel=1
pkgdesc='Low Level Virtual Machine with AMDGPU enabled to build r600g shader llvm support'
arch=('i686' 'x86_64')
url="http://llvm.org"
license=('custom:University of Illinois/NCSA Open Source License')
depends=('libffi' 'python2' 'ocaml' 'python-sphinx')
makedepends=('git')
options=('staticlibs' '!strip')
source=(git+$_gitroot
        git+http://llvm.org/git/clang.git
        git+http://llvm.org/git/clang-tools-extra.git
        git+http://llvm.org/git/compiler-rt.git
        llvm-Config-config.h
        llvm-Config-llvm-config.h)
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '312574e655f9a87784ca416949c505c452b819fad3061f2cde8aced6540a19a3'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48')

pkgver() {
  cd "$srcdir/$_gitname"
  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd "${srcdir}/${_gitname}"

  git clone ${srcdir}/clang tools/clang
  git clone ${srcdir}/clang-tools-extra tools/clang/tools/extra
  git clone ${srcdir}/compiler-rt projects/compiler-rt

  sed -i 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
    Makefile.config.in

}

build() {
  cd "${srcdir}/${_gitname}"

  # Include location of libffi headers in CPPFLAGS
  export CPPFLAGS="$CPPFLAGS $(pkg-config --cflags libffi)"

  # Force the use of GCC instead of clang
  CC=gcc CXX=g++ ./configure \
    --prefix=/usr \
    --sysconfdir=/etc \
    --enable-shared \
    --enable-libffi \
    --enable-targets=all \
    --disable-expensive-checks \
    --disable-debug-runtime \
    --disable-assertions \
    --with-binutils-include=/usr/include \
    --with-python=/usr/bin/python2 \
    --enable-optimized

  make REQUIRES_RTTI=1 ENABLE_OPTIMIZED=1
  make -C docs -f Makefile.sphinx man
  make -C docs -f Makefile.sphinx html
  make -C tools/clang/docs -f Makefile.sphinx html
}

package_llvm-git() {
  pkgdesc="Low Level Virtual Machine (git)"
  depends=('llvm-libs-git' 'perl')
  provides=('llvm')
  conflicts=('llvm')

  cd "${srcdir}/${_gitname}"

  # We move the clang directory out of the tree so it won't get installed and
  # then we bring it back in for the clang package
  mv -v tools/clang "$srcdir/clang.tmp"

  # -j1 is due to race conditions during the installation of the OCaml bindings
  make -j1 DESTDIR="$pkgdir" install

  mv -v "$srcdir/clang.tmp" tools/clang

  # OCaml bindings go to a separate package
  rm -rf "$srcdir"/{ocaml,ocamldoc}
  mv -v "$pkgdir"/usr/{lib/ocaml,share/doc/llvm/ocamldoc} "$srcdir"

  # Remove duplicate files installed by the OCaml bindings
  rm "$pkgdir"/usr/{lib/libllvm*,share/doc/llvm/ocamldoc.tar.gz}

  # Fix permissions of static libs
  chmod -x "$pkgdir"/usr/lib/*.a

  # Get rid of example Hello transformation
  rm "$pkgdir"/usr/lib/*LLVMHello.*

  # The runtime library goes into llvm-libs
  mv -v "$pkgdir/usr/lib/libLLVM-3.5.0svn.so" "$srcdir"
  mv -v "$pkgdir/usr/lib/libLLVM-3.5svn.so" "$srcdir"

  if [[ $CARCH == x86_64 ]]; then
    # Needed for multilib (https://bugs.archlinux.org/task/29951)
    # Header stubs are taken from Fedora
    for _header in config llvm-config; do
      echo "$pkgdir/usr/include/llvm/Config/$_header"{,-64}.h
      mv -v "$pkgdir/usr/include/llvm/Config/$_header"{,-64}.h
      cp "$srcdir/llvm-Config-$_header.h" \
        "$pkgdir/usr/include/llvm/Config/$_header.h"
    done
  fi

  # Install man pages
  install -d "$pkgdir/usr/share/man/man1"
  cp docs/_build/man/*.1 "$pkgdir/usr/share/man/man1/"

  # Install html docs
  cp -r docs/_build/html/* "$pkgdir/usr/share/doc/llvm/html/"
  rm -r "$pkgdir/usr/share/doc/llvm/html/_sources"

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"

}

package_llvm-libs-git() {
  pkgdesc="Low Level Virtual Machine (runtime library) (git)"
  depends=('gcc-libs' 'zlib' 'libffi')
  provides=('llvm-libs')
  conflicts=('llvm-libs')

  cd "${srcdir}/${_gitname}"

  install -m755 -d ${pkgdir}/usr/lib/
  mv -v "$srcdir/libLLVM-3.5.0svn.so" "$pkgdir/usr/lib"
  mv -v "$srcdir/libLLVM-3.5svn.so" "$pkgdir/usr/lib"

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_llvm-ocaml-git() {
  pkgdesc="OCaml bindings for LLVM (git)"
  depends=('llvm-git' 'ocaml')
  provides=('llvm-ocaml')
  conflicts=('llvm-ocaml')

  cd "${srcdir}/${_gitname}"

  install -d "$pkgdir"/{usr/lib,usr/share/doc/llvm}
  cp -r "$srcdir/ocaml" "$pkgdir/usr/lib"
  cp -r "$srcdir/ocamldoc" "$pkgdir/usr/share/doc/llvm"

  # Remove execute bit from static libraries
  chmod -x "$pkgdir"/usr/lib/ocaml/libllvm*.a

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_clang-git() {
  pkgdesc="C language family frontend for LLVM (git)"
  url="http://clang.llvm.org/"
  depends=('llvm-git' 'gcc')
  provides=('clang')
  conflicts=('clang')

  # Fix installation path for clang docs
  sed -i 's:$(PROJ_prefix)/share/doc/llvm:$(PROJ_prefix)/share/doc/clang:' \
    "$srcdir/llvm/Makefile.config"

  cd "${srcdir}/${_gitname}/tools/clang"

  # We move the extra tools directory out of the tree so it won't get
  # installed and then we bring it back in for the clang-tools-extra package
  mv -v tools/extra "$srcdir/extra.tmp"

  make DESTDIR="$pkgdir" install
  mv -v "$srcdir/extra.tmp" tools/extra

  # Fix permissions of static libs
  chmod -x "$pkgdir"/usr/lib/*.a

  # Revert the path change in case we want to do a repackage later
  sed -i 's:$(PROJ_prefix)/share/doc/clang:$(PROJ_prefix)/share/doc/llvm:' \
    "$srcdir/llvm/Makefile.config"

  # Install html docs
  cp -r docs/_build/html/* "$pkgdir/usr/share/doc/clang/html/"
  rm -r "$pkgdir/usr/share/doc/clang/html/_sources"

  # Install Python bindings
  install -d "$pkgdir/usr/lib/python2.7/site-packages"
  cp -r bindings/python/clang "$pkgdir/usr/lib/python2.7/site-packages/"
  python2 -m compileall "$pkgdir/usr/lib/python2.7/site-packages/clang"
  python2 -O -m compileall "$pkgdir/usr/lib/python2.7/site-packages/clang"

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_clang-analyzer-git() {
  pkgdesc="A source code analysis framework (git)"
  url="http://clang-analyzer.llvm.org/"
  depends=('clang-git' 'python2')
  provides=('clang-analyzer')
  conflicts=('clang-analyzer')

  cd "${srcdir}/${_gitname}/tools/clang"

  install -d "$pkgdir"/usr/{bin,lib/clang-analyzer}
  for _tool in scan-{build,view}; do
    cp -r tools/$_tool "$pkgdir/usr/lib/clang-analyzer/"
    ln -s /usr/lib/clang-analyzer/$_tool/$_tool "$pkgdir/usr/bin/"
  done

  # scan-build looks for clang within the same directory
  ln -s /usr/bin/clang "$pkgdir/usr/lib/clang-analyzer/scan-build/"

  # Relocate man page
  install -d "$pkgdir/usr/share/man/man1"
  mv -v "$pkgdir/usr/lib/clang-analyzer/scan-build/scan-build.1" \
    "$pkgdir/usr/share/man/man1/"

  # Use Python 2
  sed -i \
      -e 's|env python$|&2|' \
      -e 's|/usr/bin/python$|&2|' \
      "$pkgdir/usr/lib/clang-analyzer/scan-view/scan-view" \
      "$pkgdir/usr/lib/clang-analyzer/scan-build/set-xcode-analyzer"

  # Compile Python scripts
  python2 -m compileall "$pkgdir/usr/lib/clang-analyzer"
  python2 -O -m compileall "$pkgdir/usr/lib/clang-analyzer"

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_clang-tools-extra-git() {
  pkgdesc="Extra tools built using Clang's tooling APIs (git)"
  url="http://clang.llvm.org/"
  depends=("clang-git")
  provides=('clang-tools-extra')
  conflicts=('clang-tools-extra')

  cd "${srcdir}/${_gitname}/tools/clang/tools/extra"

  make DESTDIR="$pkgdir" install

  # Fix permissions of static libs
  chmod -x "$pkgdir"/usr/lib/*.a

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
# vim: ft=sh syn=sh et

